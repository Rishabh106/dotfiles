# Basic Settings
set previewer ~/.config/scripts/preview.sh
set preview
set hidden
set icons
set ignorecase
set info size
set scrolloff 8
set autoquit # kills the server when no clients are connected

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        application/pdf) sioyek "$fx" --new-window >/dev/null 2>&1 &;;
        *) open "$f" ;;
    esac
}}

cmd mkdir %printf "Directory Name: "; read ans; mkdir $ans

# cmd mkdir ${{
#     printf "Directory Name: "
#     read ans
#     mkdir $ans
# }}

cmd mkfile %printf "File Name: "; read ans; touch $ans

cmd chmod ${{
    printf "Mode Bits: "
    read ans

    for file in "$fx"
    do
        chmod $ans $file
    done

    lf -remote 'send reload'
}}

# Archive/unarchive commands
cmd unarchive ${{
    case "$f" in
        *.zip) unzip "$f" ;;
        *.tar.gz) tar -xzvf "$f" ;;
        *.tar.bz2) tar -xjvf "$f" ;;
        *.tar) tar -xvf "$f" ;;
        *.rar) unrar "$f" ;;
        *.7z) 7z x "$f" ;;
        *) echo "Unsupported format" ;;
    esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
    files=$(printf "$fx" | tr '\n' ';')
    while [ "$files" ]; do
        # extract the substring from start of string up to delimiter.
        # this is the first "element" of the string.
        file=${files%%;*}

        trash-put "$(basename "$file")"
        # if there's only one element left, set `files` to an empty string.
        # this causes us to exit this `while` loop.
        # else, we delete the first "element" of the string from files, and move onto the next.
        if [ "$files" = "$file" ]; then
            files=''
        else
            files="${files#*;}"
        fi
    done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

# zoxide
cmd z %{{
    result="$(zoxide query --exclude "${PWD}" -- "$@")"
    lf -remote "send ${id} cd '${result}'"
}}

# Bindings
# Remove some defaults
map m
map o
map "'"
map '"'
map d
map c
map e
map f
map t
map i

# File Openers
map ee $$EDITOR "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash
map tt tag-toggle

# fzf
map f fzf_jump

# Basic Functions
map l open
map <backspace2> set hidden!
map dD delete
map dj calcdirsize
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map md mkdir
map ch chmod
map r rename
map R reload
map C clear
map U unselect

# Movement
map gd cd ~/Documents
map gD cd ~/Downloads
map ge cd ~/Desktop
map gs cd ~/scripts
map gc cd ~/.config
map ge cd ~/code
map gn cd ~/contests
map gr cd ~/courses
map gb cd ~/books
map go cd /opt
map gh cd ~

# sort natural with size info
map sn :{{
    set sortby natural
    set info size
}}
